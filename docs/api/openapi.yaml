openapi: 3.0.3
info:
  title: Buddhist Reading Plans Public API
  description: |
    Public API for Buddhist reading plans consumption, user progress tracking, and reviews.
    This API is designed for mobile apps and websites to consume content.
    
    ## Authentication
    User-specific endpoints require JWT authentication. Include the token in the Authorization header:
    `Authorization: Bearer <your-jwt-token>`
    
    ## Rate Limiting
    - Authenticated users: 1000 requests per hour
    - Unauthenticated users: 100 requests per hour
    
  version: 1.0.0
  contact:
    name: API Support
    email: api-support@webuddhist.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.webuddhist.com/v1
    description: Production server
  - url: https://staging-api.webuddhist.com/v1
    description: Staging server
  - url: http://localhost:8000/v1
    description: Development server

security:
  - BearerAuth: []

paths:
  # Plans Endpoints
  /plans:
    get:
      tags:
        - Plans
      summary: Get all plans with filtering and pagination
      security: []
      parameters:
        - name: difficulty_level
          in: query
          schema:
            $ref: '#/components/schemas/DifficultyLevel'
        - name: search
          in: query
          description: Search in title and description
          schema:
            type: string
        - name: skip
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Plans retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPlans'


  /plans/{plan_id}:
    get:
      tags:
        - Plans
      summary: Get plan details
      security: []
      parameters:
        - name: plan_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Plan details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanDetail'
        '404':
          $ref: '#/components/responses/NotFound'


  # Plan Days Endpoints
  /plans/{plan_id}/days:
    get:
      tags:
        - Plan Days
      summary: Get plan days
      security: []
      parameters:
        - name: plan_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Plan days retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanDaysResponse'


  /plans/{plan_id}/days/{day_number}:
    get:
      tags:
        - Plan Days
      summary: Get specific day's content
      parameters:
        - name: plan_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: day_number
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Day content retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanItemDetail'

  # User Progress Endpoints
  /users/me/plans:
    get:
      tags:
        - User Progress
      summary: Get user's enrolled plans
      parameters:
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/UserPlanStatus'
      responses:
        '200':
          description: User plans retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPlans'

    post:
      tags:
        - User Progress
      summary: Enroll in a plan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                plan_id:
                  type: string
                  format: uuid
              required:
                - plan_id
      responses:
        '201':
          description: Successfully enrolled in plan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPlans'
        '409':
          description: Already enrolled in this plan

  /users/me/plans/{plan_id}:
    get:
      tags:
        - User Progress
      summary: Get user's progress for specific plan
      parameters:
        - name: plan_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User plan progress
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPlanProgress'

    put:
      tags:
        - User Progress
      summary: Update plan progress
      parameters:
        - name: plan_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPlanProgressUpdate'
      responses:
        '200':
          description: Progress updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPlanProgress'

  # Task Completion Endpoints
  /users/me/tasks/{task_id}/complete:
    post:
      tags:
        - Task Completion
      summary: Mark task as completed
      parameters:
        - name: task_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Task marked as completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskCompletion'
        '409':
          description: Task already completed
    delete:
      tags:
        - Task Completion
      summary: Unmark task completion
      parameters:
        - name: task_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Task completion removed

  # Reviews Endpoints
  /plans/{plan_id}/reviews:
    get:
      tags:
        - Reviews
      summary: Get plan reviews
      security: []
      parameters:
        - name: plan_id
          in: path
          required: true
          schema:
            type: integer
        - name: skip
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
      responses:
        '200':
          description: Reviews retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedReviews'

    post:
      tags:
        - Reviews
      summary: Create a review for a plan
      parameters:
        - name: plan_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewCreate'
      responses:
        '201':
          description: Review created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '409':
          description: User has already reviewed this plan

  # Authors Endpoints
  /authors:
    get:
      tags:
        - Authors
      summary: Get all authors
      security: []
      parameters:
        - name: verified_only
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Authors retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'

  /authors/{author_id}:
    get:
      tags:
        - Authors
      summary: Get author details
      security: []
      parameters:
        - name: author_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Author details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorDetail'
        '404':
          $ref: '#/components/responses/NotFound'

  /authors/{author_id}/plans:
    get:
      tags:
        - Authors
      summary: Get plans by author
      security: []
      parameters:
        - name: author_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Author's plans
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plan'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Enums
    DifficultyLevel:
      type: string
      enum:
        - BEGINNER
        - INTERMEDIATE
        - ADVANCED

    ContentType:
      type: string
      enum:
        - TEXT
        - AUDIO
        - VIDEO
        - IMAGE
        - SOURCE_REFERENCE

    UserPlanStatus:
      type: string
      enum:
        - not_started
        - active
        - paused
        - completed
        - abandoned

    # User Schemas
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        created_at:
          type: string
          format: date-time

    # Plan Schemas
    Plan:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        image_url:
          type: string
          format: uri
        total_days:
          type: integer
        difficulty_level:
          $ref: '#/components/schemas/DifficultyLevel'
        language:
          type: string
          example: "en"
      required:
        - id
        - title
        - description
        - total_days
        - difficulty_level

    PlanDetail:
      allOf:
        - $ref: '#/components/schemas/Plan'
        - type: object
          properties:
            average_rating:
              type: number
              format: float
              minimum: 1
              maximum: 5
            review_count:
              type: integer
            enrollment_count:
              type: integer
            tags:
              type: array
              items:
                type: string


    PaginatedPlans:
      type: object
      properties:
        plans:
          type: array
          items:
            $ref: '#/components/schemas/Plan'
        skip:
          type: integer
        limit:
          type: integer
        total:
          type: integer

    # Plan Day Schemas (renamed from PlanItem to match CMS)
    PlanDay:
      type: object
      properties:
        id:
          type: string
          format: uuid
        day_number:
          type: integer
        title:
          type: string
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        is_completed:
          type: boolean
          description: "Only present when user is authenticated and enrolled in this plan"
        completed_at:
          type: string
          format: date-time
          description: "Only present when user is authenticated and enrolled in this plan"
      required:
        - id
        - day_number
        - title
        - tasks

    PlanItemDetail:
      $ref: '#/components/schemas/PlanDay'

    PlanDayBasic:
      type: object
      properties:
        id:
          type: string
          format: uuid
        day_number:
          type: integer
        title:
          type: string
        is_completed:
          type: boolean
          description: "Only present when user is authenticated and enrolled in this plan"
        completed_at:
          type: string
          format: date-time
          description: "Only present when user is authenticated and enrolled in this plan"
      required:
        - id
        - day_number
        - title

    PlanDaysResponse:
      type: object
      properties:
        days:
          type: array
          items:
            $ref: '#/components/schemas/PlanDayBasic'
      required:
        - days


    # Task Schemas
    Task:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        content_type:
          $ref: '#/components/schemas/ContentType'
        content:
          type: string
        estimated_time:
          type: integer
          description: "Estimated time in minutes"
        is_completed:
          type: boolean
          description: "Only present when user is authenticated and enrolled in this plan"
        completed_at:
          type: string
          format: date-time
          description: "Only present when user is authenticated and enrolled in this plan"
      required:
        - id
        - title
        - content_type

    TaskCompletion:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        task_id:
          type: string
          format: uuid
        completed_at:
          type: string
          format: date-time

    # User Progress Schemas
    UserPlanProgress:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        plan_id:
          type: string
          format: uuid
        plan:
          $ref: '#/components/schemas/Plan'
        started_at:
          type: string
          format: date-time
        streak_count:
          type: integer
        longest_streak:
          type: integer
        status:
          $ref: '#/components/schemas/UserPlanStatus'
        is_completed:
          type: boolean
        completed_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time

    UserPlanProgressUpdate:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/UserPlanStatus'

    UserPlanProgressSummary:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/UserPlanStatus'
        days_completed:
          type: integer
          description: "Number of days completed in this plan"
        current_day:
          type: integer
          description: "Current day the user is on (1-based)"
        streak_count:
          type: integer
          description: "Current consecutive days streak"
        longest_streak:
          type: integer
          description: "Longest streak achieved in this plan"
        completion_percentage:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: "Percentage of plan completed (0-100)"
        started_at:
          type: string
          format: date-time
          description: "When the user enrolled in this plan"
        last_activity_at:
          type: string
          format: date-time
          description: "Last time user completed any task in this plan"
        is_completed:
          type: boolean
          description: "Whether the user has completed the entire plan"
        completed_at:
          type: string
          format: date-time
          description: "When the user completed the plan (if completed)"
      required:
        - status
        - days_completed
        - current_day
        - streak_count
        - longest_streak
        - completion_percentage
        - started_at
        - is_completed

    # Favorites Schemas
    Favorite:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        plan_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time

    # Review Schemas
    Review:
      type: object
      properties:
        id:
          type: string
          format: uuid
        plan_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        user_name:
          type: string
        rating:
          type: integer
          minimum: 1
          maximum: 5
        review_text:
          type: string
        is_approved:
          type: boolean
        created_at:
          type: string
          format: date-time

    ReviewCreate:
      type: object
      properties:
        rating:
          type: integer
          minimum: 1
          maximum: 5
        review_text:
          type: string
          maxLength: 1000
      required:
        - rating

    PaginatedReviews:
      type: object
      properties:
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/Review'
        skip:
          type: integer
        limit:
          type: integer
        total:
          type: integer

    # Author Schemas
    Author:
      type: object
      properties:
        id:
          type: string
          format: uuid
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        image_url:
          type: string
          format: uri
        bio:
          type: string
        is_verified:
          type: boolean
        is_active:
          type: boolean

    AuthorDetail:
      allOf:
        - $ref: '#/components/schemas/Author'
        - type: object
          properties:
            plan_count:
              type: integer
            average_rating:
              type: number
              format: float
            bio:
              type: string


    # Error Schemas
    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object

    ValidationError:
      type: object
      properties:
        error:
          type: string
          example: "validation_failed"
        message:
          type: string
          example: "Request validation failed"
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "authentication_required"
            message: "Invalid or expired token"

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "insufficient_permissions"
            message: "Insufficient permissions for this action"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "resource_not_found"
            message: "The requested resource was not found"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "internal_error"
            message: "An unexpected error occurred"

tags:
  - name: Plans
    description: Buddhist reading plans management
  - name: Plan Days
    description: Daily content within plans
  - name: User Progress
    description: User enrollment and progress tracking
  - name: Task Completion
    description: Individual task completion tracking
  - name: Reviews
    description: Plan reviews and ratings
  - name: Authors
    description: Content authors and teachers
  - name: Favorites
    description: User plan favorites
