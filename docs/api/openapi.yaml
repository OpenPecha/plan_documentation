openapi: 3.0.3
info:
  title: Buddhist Reading Plans API
  description: |
    API for managing Buddhist reading plans, user progress tracking, and content delivery.
    
    ## Authentication
    Most endpoints require JWT authentication. Include the token in the Authorization header:
    `Authorization: Bearer <your-jwt-token>`
    
    ## Rate Limiting
    - Authenticated users: 1000 requests per hour
    - Unauthenticated users: 100 requests per hour
    
  version: 1.0.0
  contact:
    name: API Support
    email: api-support@buddhist-plans.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.buddhist-plans.com/v1
    description: Production server
  - url: https://staging-api.buddhist-plans.com/v1
    description: Staging server
  - url: http://localhost:8000/v1
    description: Development server

security:
  - BearerAuth: []

paths:
  # Plans Endpoints
  /plans:
    get:
      tags:
        - Plans
      summary: Get all plans with filtering and pagination
      security: []
      parameters:
        - name: difficulty_level
          in: query
          schema:
            $ref: '#/components/schemas/DifficultyLevel'
        - name: tags
          in: query
          description: Comma-separated list of tags
          schema:
            type: string
            example: "meditation,compassion"
        - name: featured
          in: query
          schema:
            type: boolean
        - name: search
          in: query
          description: Search in title and description
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Plans retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPlans'

    post:
      tags:
        - Plans
      summary: Create a new plan (Admin/Author only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanCreate'
      responses:
        '201':
          description: Plan created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'

  /plans/{plan_id}:
    get:
      tags:
        - Plans
      summary: Get plan details
      security: []
      parameters:
        - name: plan_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Plan details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanDetail'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Plans
      summary: Update plan (Admin/Author only)
      parameters:
        - name: plan_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanUpdate'
      responses:
        '200':
          description: Plan updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Plans
      summary: Delete plan (Admin only)
      parameters:
        - name: plan_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Plan deleted successfully
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # Plan Items Endpoints
  /plans/{plan_id}/items:
    get:
      tags:
        - Plan Items
      summary: Get plan items (days)
      security: []
      parameters:
        - name: plan_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Plan items retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlanItem'

    post:
      tags:
        - Plan Items
      summary: Add item to plan (Admin/Author only)
      parameters:
        - name: plan_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanItemCreate'
      responses:
        '201':
          description: Plan item created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanItem'

  /plans/{plan_id}/items/{day_number}:
    get:
      tags:
        - Plan Items
      summary: Get specific day's content
      parameters:
        - name: plan_id
          in: path
          required: true
          schema:
            type: integer
        - name: day_number
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Day content retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanItemDetail'

  # User Progress Endpoints
  /users/me/plans:
    get:
      tags:
        - User Progress
      summary: Get user's enrolled plans
      parameters:
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/UserPlanStatus'
      responses:
        '200':
          description: User plans retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserPlanProgress'

    post:
      tags:
        - User Progress
      summary: Enroll in a plan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                plan_id:
                  type: integer
              required:
                - plan_id
      responses:
        '201':
          description: Successfully enrolled in plan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPlanProgress'
        '409':
          description: Already enrolled in this plan

  /users/me/plans/{plan_id}:
    get:
      tags:
        - User Progress
      summary: Get user's progress for specific plan
      parameters:
        - name: plan_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User plan progress
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPlanProgress'

    put:
      tags:
        - User Progress
      summary: Update plan progress
      parameters:
        - name: plan_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPlanProgressUpdate'
      responses:
        '200':
          description: Progress updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPlanProgress'

  # Task Completion Endpoints
  /users/me/tasks/{task_id}/complete:
    post:
      tags:
        - Task Completion
      summary: Mark task as completed
      parameters:
        - name: task_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Task marked as completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskCompletion'
        '409':
          description: Task already completed
    delete:
      tags:
        - Task Completion
      summary: Unmark task completion
      parameters:
        - name: task_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Task completion removed

  # Reviews Endpoints
  /plans/{plan_id}/reviews:
    get:
      tags:
        - Reviews
      summary: Get plan reviews
      security: []
      parameters:
        - name: plan_id
          in: path
          required: true
          schema:
            type: integer
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
      responses:
        '200':
          description: Reviews retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedReviews'

    post:
      tags:
        - Reviews
      summary: Create a review for a plan
      parameters:
        - name: plan_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewCreate'
      responses:
        '201':
          description: Review created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '409':
          description: User has already reviewed this plan

  # Authors Endpoints
  /authors:
    get:
      tags:
        - Authors
      summary: Get all authors
      security: []
      parameters:
        - name: verified_only
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Authors retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    post:
      tags:
        - Authors
      summary: Create a new author (Admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorCreate'
      responses:
        '201':
          description: Author created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'

  /authors/{author_id}:
    get:
      tags:
        - Authors
      summary: Get author details
      security: []
      parameters:
        - name: author_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Author details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorDetail'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Authors
      summary: Update author (Admin only)
      parameters:
        - name: author_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorUpdate'
      responses:
        '200':
          description: Author updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Authors
      summary: Delete author (Admin only)
      parameters:
        - name: author_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Author deleted successfully
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Cannot delete author with existing plans

  /authors/{author_id}/plans:
    get:
      tags:
        - Authors
      summary: Get plans by author
      security: []
      parameters:
        - name: author_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Author's plans
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plan'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Enums
    DifficultyLevel:
      type: string
      enum:
        - beginner
        - intermediate
        - advanced

    ContentType:
      type: string
      enum:
        - text
        - audio
        - video
        - image
        - source_reference

    UserPlanStatus:
      type: string
      enum:
        - not_started
        - active
        - paused
        - completed
        - abandoned

    # User Schemas
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        name:
          type: string
        created_at:
          type: string
          format: date-time

    # Plan Schemas
    Plan:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        language:
          type: string
          example: "en"
        difficulty_level:
          $ref: '#/components/schemas/DifficultyLevel'
        tags:
          type: array
          items:
            type: string
        featured:
          type: boolean
        is_active:
          type: boolean
        image_url:
          type: string
          format: uri

    PlanDetail:
      allOf:
        - $ref: '#/components/schemas/Plan'
        - type: object
          properties:
            total_days:
              type: integer
            average_rating:
              type: number
              format: float
              minimum: 1
              maximum: 5
            review_count:
              type: integer
            enrollment_count:
              type: integer

    PlanCreate:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
        language:
          type: string
          default: "en"
        difficulty_level:
          $ref: '#/components/schemas/DifficultyLevel'
        tags:
          type: array
          items:
            type: string
        image_url:
          type: string
          format: uri
      required:
        - title
        - difficulty_level

    PlanUpdate:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
        difficulty_level:
          $ref: '#/components/schemas/DifficultyLevel'
        tags:
          type: array
          items:
            type: string
        featured:
          type: boolean
        is_active:
          type: boolean
        image_url:
          type: string
          format: uri

    PaginatedPlans:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Plan'
        total:
          type: integer
        page:
          type: integer
        limit:
          type: integer
        total_pages:
          type: integer

    # Plan Item Schemas
    PlanItem:
      type: object
      properties:
        id:
          type: integer
        plan_id:
          type: integer
        day_number:
          type: integer
        created_at:
          type: string
          format: date-time

    PlanItemDetail:
      allOf:
        - $ref: '#/components/schemas/PlanItem'
        - type: object
          properties:
            tasks:
              type: array
              items:
                $ref: '#/components/schemas/Task'

    PlanItemCreate:
      type: object
      properties:
        day_number:
          type: integer
          minimum: 1
      required:
        - day_number

    # Task Schemas
    Task:
      type: object
      properties:
        id:
          type: integer
        plan_item_id:
          type: integer
        content_type:
          $ref: '#/components/schemas/ContentType'
        content:
          type: string
        display_order:
          type: integer
        estimated_time:
          type: integer
        is_required:
          type: boolean
        is_completed:
          type: boolean
          description: "Only present when user is authenticated"

    TaskCompletion:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        task_id:
          type: integer
        completed_at:
          type: string
          format: date-time

    # User Progress Schemas
    UserPlanProgress:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        plan_id:
          type: integer
        plan:
          $ref: '#/components/schemas/Plan'
        started_at:
          type: string
          format: date-time
        streak_count:
          type: integer
        longest_streak:
          type: integer
        status:
          $ref: '#/components/schemas/UserPlanStatus'
        is_completed:
          type: boolean
        completed_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time

    UserPlanProgressUpdate:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/UserPlanStatus'

    # Favorites Schemas
    Favorite:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        plan_id:
          type: integer
        created_at:
          type: string
          format: date-time

    # Review Schemas
    Review:
      type: object
      properties:
        id:
          type: integer
        plan_id:
          type: integer
        user_id:
          type: integer
        user_name:
          type: string
        rating:
          type: integer
          minimum: 1
          maximum: 5
        review_text:
          type: string
        is_approved:
          type: boolean
        created_at:
          type: string
          format: date-time

    ReviewCreate:
      type: object
      properties:
        rating:
          type: integer
          minimum: 1
          maximum: 5
        review_text:
          type: string
          maxLength: 1000
      required:
        - rating

    PaginatedReviews:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Review'
        total:
          type: integer
        page:
          type: integer
        limit:
          type: integer
        total_pages:
          type: integer

    # Author Schemas
    Author:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        image_url:
          type: string
          format: uri
        is_verified:
          type: boolean
        is_active:
          type: boolean

    AuthorDetail:
      allOf:
        - $ref: '#/components/schemas/Author'
        - type: object
          properties:
            plan_count:
              type: integer
            average_rating:
              type: number
              format: float
            bio:
              type: string

    AuthorCreate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        image_url:
          type: string
          format: uri
        bio:
          type: string
          maxLength: 1000
        is_verified:
          type: boolean
          default: false
        is_active:
          type: boolean
          default: true

    AuthorUpdate:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        image_url:
          type: string
          format: uri
        bio:
          type: string
          maxLength: 1000
        is_verified:
          type: boolean
        is_active:
          type: boolean

    # Error Schemas
    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object

    ValidationError:
      type: object
      properties:
        error:
          type: string
          example: "validation_failed"
        message:
          type: string
          example: "Request validation failed"
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "authentication_required"
            message: "Invalid or expired token"

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "insufficient_permissions"
            message: "Insufficient permissions for this action"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "resource_not_found"
            message: "The requested resource was not found"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "internal_error"
            message: "An unexpected error occurred"

tags:
  - name: Plans
    description: Buddhist reading plans management
  - name: Plan Items
    description: Daily content within plans
  - name: User Progress
    description: User enrollment and progress tracking
  - name: Task Completion
    description: Individual task completion tracking
  - name: Reviews
    description: Plan reviews and ratings
  - name: Authors
    description: Content authors and teachers
  - name: Favorites
    description: User plan favorites
